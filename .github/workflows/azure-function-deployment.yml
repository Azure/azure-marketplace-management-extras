name: Notification Endpoint
# description: Deploys the Notification Endpoint infrastructure and code

on:
  workflow_dispatch:

env:
  APP_NAME: "notifications"
  SUBSCRIPTION_NAME: "changeme"
  RESOURCE_GROUP_NAME: "notification-endpoint"
  LOCATION: "northeurope"

concurrency:
  # Serializing this workflow.
  group: ${{ github.workflow }}

jobs:
  test:
    name: Test function app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "changeme"
          cache: 'pip'
          cache-dependency-path: 'notification-endpoint/requirements.txt'

      - name: Install dependencies
        working-directory: ./notification-endpoint
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Test with pytest
        working-directory: ./notification-endpoint
        run: |
          pytest NotificationHandler -v

  infra:
    needs: [test]
    name: Deploy infrastructure
    environment: NOTIFICATION_ENDPOINT
    runs-on: ubuntu-latest
    outputs:
      function-app-name: ${{ steps.deploy.outputs.functionAppName }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Azure
        run: |
          az login --identity -u ${{ changeme }}
          az account set -s ${{ env.SUBSCRIPTION_NAME }}

      - name: Get git short sha
        run: |
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: supplypike/setup-bin@v3
        name: Install bicep
        with:
          uri: https://github.com/Azure/bicep/releases/download/v${{ changeme }}/bicep-linux-x64
          name: bicep
          version: ${{ changeme }}

      - name: Build Bicep templates
        working-directory: ./notification-endpoint/azure
        run: |
          bicep build main.bicep

      - name: Create resource group
        run: |
          az group create \
            -n ${{ env.RESOURCE_GROUP_NAME }} \
            -l ${{ env.LOCATION }}

      - name: Deploy infrastructure template
        uses: azure/arm-deploy@v1
        id: deploy
        with:
          scope: "resourcegroup"
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: notification-endpoint/azure/main.json
          parameters: >
            appName=${{ env.APP_NAME }}
            spClientId=${{ secrets.SP_CLIENT_ID }}
            spClientSecret=${{ secrets.SP_CLIENT_SECRET }}
            spTenantId=${{ secrets.SP_TENANT_ID }}
          deploymentName: git-${{ env.SHA_SHORT }}

  app:
    name: Deploy function app
    runs-on: ubuntu-latest
    needs: [infra]
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-node-action
        name: Prepare versioning
        with:
          directory: ./.github/actions/get-versions
          cache-id: get-versions

      - uses: ./.github/actions/get-versions
        name: Get tool versions
        id: versions-tools
        with:
          version-files: ./versions-tools.json

      - name: Login to Azure
        run: |
          az login --identity -u ${{ changeme }}
          az account set -s ${{ env.SUBSCRIPTION_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ steps.versions-tools.outputs.azureFunctionsPython }}"

      - name: Resolve function dependencies
        working-directory: ./notification-endpoint
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: Deploy notification endpoint function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.infra.outputs.function-app-name }}
          package: ./notification-endpoint

      - name: Deploy policy states collector function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ changeme }}
          package: ./policy-states-collector

      - name: Show function invoke URL
        run: |
          invoke_url=$(az functionapp function show \
            -g ${{ env.RESOURCE_GROUP_NAME }} \
            -n ${{ needs.infra.outputs.function-app-name }} \
            --function-name NotificationHandler \
            -o tsv --query invokeUrlTemplate)

          echo "âœ… Function invoke URL: $invoke_url"
